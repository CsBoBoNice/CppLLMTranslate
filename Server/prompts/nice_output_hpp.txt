/*
 * 版权所有 (c) 2014-2015 Wind River Systems, Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @file
 * @brief 系统时钟所需的变量
 *
 *
 * 声明由系统定时器设备驱动程序和内核组件使用的变量，这些组件使用定时器功能。
 */

#ifndef CLOCK_H_
#define CLOCK_H_

#include <util.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @addtogroup clock_apis
 * @{
 */

/**
 * @brief 比较超时是否相等
 *
 * k_timeout_t对象是一个不透明结构，应用程序代码不应检查。此宏存在是为了让用户在实现自己的API时，可以测试超时对象与已知常量（例如 K_NO_WAIT 和 K_FOREVER）是否相等。
 *
 * @return 如果超时对象相同，则返回真
 */
#define K_TIMEOUT_EQ(a, b) ((a).ticks == (b).ticks)

/** 每微秒的纳秒数 */
#define NSEC_PER_USEC 1000U

/** @} */

/** @cond INTERNAL_HIDDEN */

/*
 * 将绝对超时到期值（打包在K_TICKS_FOREVER下方的负空间中）与（非负）增量超时值之间进行转换。
 */
#define Z_TICK_ABS(t) (K_TICKS_FOREVER - 1 - (t))

/** @endcond */

/* 内核时钟 */

/*
 * 我们默认使用64位中间变量进行时间尺度转换，
 * 但是如果硬件定时器周期/秒，滴答/秒和毫秒/秒都已知是良好相关的，那么我们可以用32位作弊。
 */
/**
 * @addtogroup clock_apis
 * @{
 */

#ifdef CLOCK_EXISTS

/**
 * @brief 给定时间点剩余时间
 *
 * 返回当前时间与提供时间点之间的超时间隔。
 * 如果时间点现在是过去的，或者它是由 `K_NO_WAIT` 创建的，那么返回 `K_NO_WAIT`。
 * 如果它是由 `K_FOREVER` 创建的，那么返回 `K_FOREVER`。
 *
 * @param timepoint 想要超时值的时间点。
 * @retval 对应的超时值。
 *
 * @see sys_timepoint_calc()
 */
k_timeout_t sys_timepoint_timeout(k_timepoint_t timepoint);

/**
 * @brief 比较两个时间点值。
 *
 * 此函数用于比较两个时间点值。

 * @param a 要比较的时间点
 * @param b 要比较的时间点
 * @return 如果两个时间点相同，则返回零。如果时间点 @a a 在时间点 @a b 之前，则返回负值，否则返回正值。
 */
static inline int sys_timepoint_cmp(k_timepoint_t a, k_timepoint_t b)
{
	if (a.tick == b.tick) {
		return 0;
	}
	return a.tick < b.tick ? -1 : 1;
}

#endif

/** @} */

#ifdef __cplusplus
}
#endif

#endif /* CLOCK_H_ */
